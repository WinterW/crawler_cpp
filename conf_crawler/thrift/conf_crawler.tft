/// type for template extract method
enum TemplateType {
  CSS_SELECTOR_TYPE = 0,        /// extract utilizing css selector
  PLAIN_HTML_TYPE,              /// extract by scaning plain html
  RELAY_TYPE,                   /// relay to next extractor svr
  TEMPLATE_TYPE_MAX,            /// larger than the last valid type
  NONE_TYPE = 10000,            /// invalid type
}

/// type for http headers in download request
enum HeaderFieldsType {
  DEFAULT_TYPE = 0,             /// do not update header fields
  UPDATE_PART_TYPE,             /// update some header fields
  UPDATE_ALL_TYPE,              /// update all header fields
  HEADER_FIELDS_TYPE_MAX,       /// larger than the last valid type
  NONE_TYPE = 10000,            /// invalid type
}

/// type for downloader
enum DownloaderType {
  NORMAL_TYPE = 0,              /// normal download type
  WEBKIT_TYPE,                  /// download by webkit
  DOWNLOADER_TYPE_MAX,          /// larger than the last valid type
  NONE_TYPE = 10000,            /// invalid type
}

struct DownloadReqItem {
  1:string url,
  2:string ip,
  3:string referer,
  4:string ua,
  5:HeaderFieldsType header_fields_type,
  6:DownloaderType downloader_type,     /// downloader type
  7:string post_fields,
  8:i32 time_out,
}

struct DownloadPropItem {
  1:bool is_img,
  2:bool is_friendly,
  3:i32 interval,
  4:i32 retry_times,
  5:string seed_url,
  6:i32 depth,
}

struct DownloadTask {
  1:DownloadReqItem req_item,
  2:DownloadPropItem prop_item,
}

struct DownloadedBodyItem {
  1:DownloadReqItem req_item,
  2:DownloadPropItem prop_item,
  3:bool is_ok,
  4:string body,
}

struct ExtractItem {
  1:string url,
  2:string url_template,
  3:i32 depth,
  4:string body,
  5:string seed_url,
  6:string referer,
  7:TemplateType template_type,
}

struct MatchedResultItem {
  1:map<string, list<string> > self_result,
  2:list<map<string, list<string> > > sub_result_list,
  3:bool is_ok,
  4:string err_info,
}

service LinkBaseService {
  /// load seed from db
  void load_seed_by_id(1:i32 id, 2:bool is_add_link),
  void load_seed_by_url(1:string seed_url, 2:bool is_add_link),

  /// get download task by dc
  list<DownloadTask> get_download_task(),

  /// get extract task by extractor
  list<ExtractItem> get_extract_task(),

  /// upload download task by dc
  void upload_download_task(1:DownloadedBodyItem downloaded_body_item),

  /// upload extract task by extractor
  void upload_extract_task(1:ExtractItem extract_item, 2:MatchedResultItem matched_result_item),
}

service StaticLinkBaseService {
  /// load seed from db
  void load_db_task(1:i32 task_id, 2:bool is_add_task),

  /// load seed from mongodb
  void load_mongodb_task(1:i32 task_id, 2:bool is_add_task),

  /// get download task by dc
  list<DownloadTask> get_download_task(),

  /// get extract task by extractor
  list<ExtractItem> get_extract_task(),

  /// get one extract task by extractor, for debug
  ExtractItem get_one_extract_task(),

  /// upload download task by dc
  void upload_download_task(1:DownloadedBodyItem downloaded_body_item),

  /// upload extract task by extractor
  void upload_extract_task(1:ExtractItem extract_item, 2:MatchedResultItem matched_result_item),
}

service DCService {
  /// get download task by downloader
  list<DownloadTask> get_download_task(1:DownloaderType downloader_type),

  /// push download task, for debug
  void push_download_task(1:DownloadTask download_task),

  /// upload download task by downloader
  void upload_download_task(1:DownloadedBodyItem downloaded_body_item),
}

service HeaderFieldsService {
  /// get header fields for url
  list<string> get_header_fields(1:string url, 2:i32 depth),
}

service ExtractorService {
  /// load template
  i32 load_template(1:string url_template, 2:TemplateType template_type),

  /// erase template
  void unload_template(1:string url_template, 2:TemplateType template_type),

  MatchedResultItem extract_sync(1:ExtractItem extract_item),
}

struct DedupExistItem {
  1:bool is_exists,
  2:string item_info,
}

service DedupService {
  DedupExistItem is_exists(1:string url),

  bool insert(1:string url),

  bool test_exists_and_insert(1:string url),

  /// remove one url, return true if exists
  bool remove(1:string url);

  /// show internal information
  string info(),

  /// set #bucket, for hash table implementation only
  i32 set_bucket_count(1:i32 bucket_count),

  /// batch remove url pattern, return #url removed, for static dedup svr only
  i32 batch_remove(1:string url_pattern);
}

service Img2PhoneService {
  string get_phone_by_img(1:string url, 2:string img_str),
}

service CoverageService {
  /// get download task by dc
  list<DownloadTask> get_download_task(),

  /// upload download task by dc
  void upload_download_task(1:DownloadedBodyItem downloaded_body_item),
}

service CheckDeadlinkService {
  /// check whether the url with body is dead link
  bool is_dead_link(1:string url, 2:string body),
}
