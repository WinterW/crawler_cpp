// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DedupService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DedupServiceHandler : virtual public DedupServiceIf {
 public:
  DedupServiceHandler() {
    // Your initialization goes here
  }

  void is_exists(DedupExistItem& _return, const std::string& url) {
    // Your implementation goes here
    printf("is_exists\n");
  }

  bool insert(const std::string& url) {
    // Your implementation goes here
    printf("insert\n");
  }

  bool test_exists_and_insert(const std::string& url) {
    // Your implementation goes here
    printf("test_exists_and_insert\n");
  }

  bool remove(const std::string& url) {
    // Your implementation goes here
    printf("remove\n");
  }

  void info(std::string& _return) {
    // Your implementation goes here
    printf("info\n");
  }

  int32_t set_bucket_count(const int32_t bucket_count) {
    // Your implementation goes here
    printf("set_bucket_count\n");
  }

  int32_t batch_remove(const std::string& url_pattern) {
    // Your implementation goes here
    printf("batch_remove\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DedupServiceHandler> handler(new DedupServiceHandler());
  shared_ptr<TProcessor> processor(new DedupServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

