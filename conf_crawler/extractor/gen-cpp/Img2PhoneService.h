/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Img2PhoneService_H
#define Img2PhoneService_H

#include <thrift/TDispatchProcessor.h>
#include "conf_crawler_types.h"



class Img2PhoneServiceIf {
 public:
  virtual ~Img2PhoneServiceIf() {}
  virtual void get_phone_by_img(std::string& _return, const std::string& url, const std::string& img_str) = 0;
};

class Img2PhoneServiceIfFactory {
 public:
  typedef Img2PhoneServiceIf Handler;

  virtual ~Img2PhoneServiceIfFactory() {}

  virtual Img2PhoneServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Img2PhoneServiceIf* /* handler */) = 0;
};

class Img2PhoneServiceIfSingletonFactory : virtual public Img2PhoneServiceIfFactory {
 public:
  Img2PhoneServiceIfSingletonFactory(const boost::shared_ptr<Img2PhoneServiceIf>& iface) : iface_(iface) {}
  virtual ~Img2PhoneServiceIfSingletonFactory() {}

  virtual Img2PhoneServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Img2PhoneServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<Img2PhoneServiceIf> iface_;
};

class Img2PhoneServiceNull : virtual public Img2PhoneServiceIf {
 public:
  virtual ~Img2PhoneServiceNull() {}
  void get_phone_by_img(std::string& /* _return */, const std::string& /* url */, const std::string& /* img_str */) {
    return;
  }
};

typedef struct _Img2PhoneService_get_phone_by_img_args__isset {
  _Img2PhoneService_get_phone_by_img_args__isset() : url(false), img_str(false) {}
  bool url;
  bool img_str;
} _Img2PhoneService_get_phone_by_img_args__isset;

class Img2PhoneService_get_phone_by_img_args {
 public:

  Img2PhoneService_get_phone_by_img_args() : url(), img_str() {
  }

  virtual ~Img2PhoneService_get_phone_by_img_args() throw() {}

  std::string url;
  std::string img_str;

  _Img2PhoneService_get_phone_by_img_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_img_str(const std::string& val) {
    img_str = val;
  }

  bool operator == (const Img2PhoneService_get_phone_by_img_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(img_str == rhs.img_str))
      return false;
    return true;
  }
  bool operator != (const Img2PhoneService_get_phone_by_img_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Img2PhoneService_get_phone_by_img_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Img2PhoneService_get_phone_by_img_pargs {
 public:


  virtual ~Img2PhoneService_get_phone_by_img_pargs() throw() {}

  const std::string* url;
  const std::string* img_str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Img2PhoneService_get_phone_by_img_result__isset {
  _Img2PhoneService_get_phone_by_img_result__isset() : success(false) {}
  bool success;
} _Img2PhoneService_get_phone_by_img_result__isset;

class Img2PhoneService_get_phone_by_img_result {
 public:

  Img2PhoneService_get_phone_by_img_result() : success() {
  }

  virtual ~Img2PhoneService_get_phone_by_img_result() throw() {}

  std::string success;

  _Img2PhoneService_get_phone_by_img_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Img2PhoneService_get_phone_by_img_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Img2PhoneService_get_phone_by_img_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Img2PhoneService_get_phone_by_img_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Img2PhoneService_get_phone_by_img_presult__isset {
  _Img2PhoneService_get_phone_by_img_presult__isset() : success(false) {}
  bool success;
} _Img2PhoneService_get_phone_by_img_presult__isset;

class Img2PhoneService_get_phone_by_img_presult {
 public:


  virtual ~Img2PhoneService_get_phone_by_img_presult() throw() {}

  std::string* success;

  _Img2PhoneService_get_phone_by_img_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Img2PhoneServiceClient : virtual public Img2PhoneServiceIf {
 public:
  Img2PhoneServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  Img2PhoneServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_phone_by_img(std::string& _return, const std::string& url, const std::string& img_str);
  void send_get_phone_by_img(const std::string& url, const std::string& img_str);
  void recv_get_phone_by_img(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Img2PhoneServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<Img2PhoneServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Img2PhoneServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_phone_by_img(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Img2PhoneServiceProcessor(boost::shared_ptr<Img2PhoneServiceIf> iface) :
    iface_(iface) {
    processMap_["get_phone_by_img"] = &Img2PhoneServiceProcessor::process_get_phone_by_img;
  }

  virtual ~Img2PhoneServiceProcessor() {}
};

class Img2PhoneServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Img2PhoneServiceProcessorFactory(const ::boost::shared_ptr< Img2PhoneServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< Img2PhoneServiceIfFactory > handlerFactory_;
};

class Img2PhoneServiceMultiface : virtual public Img2PhoneServiceIf {
 public:
  Img2PhoneServiceMultiface(std::vector<boost::shared_ptr<Img2PhoneServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Img2PhoneServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<Img2PhoneServiceIf> > ifaces_;
  Img2PhoneServiceMultiface() {}
  void add(boost::shared_ptr<Img2PhoneServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_phone_by_img(std::string& _return, const std::string& url, const std::string& img_str) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_phone_by_img(_return, url, img_str);
    }
    ifaces_[i]->get_phone_by_img(_return, url, img_str);
    return;
  }

};



#endif
