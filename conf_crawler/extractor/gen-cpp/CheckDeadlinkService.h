/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CheckDeadlinkService_H
#define CheckDeadlinkService_H

#include <thrift/TDispatchProcessor.h>
#include "conf_crawler_types.h"



class CheckDeadlinkServiceIf {
 public:
  virtual ~CheckDeadlinkServiceIf() {}
  virtual bool is_dead_link(const std::string& url, const std::string& body) = 0;
};

class CheckDeadlinkServiceIfFactory {
 public:
  typedef CheckDeadlinkServiceIf Handler;

  virtual ~CheckDeadlinkServiceIfFactory() {}

  virtual CheckDeadlinkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CheckDeadlinkServiceIf* /* handler */) = 0;
};

class CheckDeadlinkServiceIfSingletonFactory : virtual public CheckDeadlinkServiceIfFactory {
 public:
  CheckDeadlinkServiceIfSingletonFactory(const boost::shared_ptr<CheckDeadlinkServiceIf>& iface) : iface_(iface) {}
  virtual ~CheckDeadlinkServiceIfSingletonFactory() {}

  virtual CheckDeadlinkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CheckDeadlinkServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CheckDeadlinkServiceIf> iface_;
};

class CheckDeadlinkServiceNull : virtual public CheckDeadlinkServiceIf {
 public:
  virtual ~CheckDeadlinkServiceNull() {}
  bool is_dead_link(const std::string& /* url */, const std::string& /* body */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _CheckDeadlinkService_is_dead_link_args__isset {
  _CheckDeadlinkService_is_dead_link_args__isset() : url(false), body(false) {}
  bool url;
  bool body;
} _CheckDeadlinkService_is_dead_link_args__isset;

class CheckDeadlinkService_is_dead_link_args {
 public:

  CheckDeadlinkService_is_dead_link_args() : url(), body() {
  }

  virtual ~CheckDeadlinkService_is_dead_link_args() throw() {}

  std::string url;
  std::string body;

  _CheckDeadlinkService_is_dead_link_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const CheckDeadlinkService_is_dead_link_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const CheckDeadlinkService_is_dead_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckDeadlinkService_is_dead_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CheckDeadlinkService_is_dead_link_pargs {
 public:


  virtual ~CheckDeadlinkService_is_dead_link_pargs() throw() {}

  const std::string* url;
  const std::string* body;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CheckDeadlinkService_is_dead_link_result__isset {
  _CheckDeadlinkService_is_dead_link_result__isset() : success(false) {}
  bool success;
} _CheckDeadlinkService_is_dead_link_result__isset;

class CheckDeadlinkService_is_dead_link_result {
 public:

  CheckDeadlinkService_is_dead_link_result() : success(0) {
  }

  virtual ~CheckDeadlinkService_is_dead_link_result() throw() {}

  bool success;

  _CheckDeadlinkService_is_dead_link_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const CheckDeadlinkService_is_dead_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CheckDeadlinkService_is_dead_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckDeadlinkService_is_dead_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CheckDeadlinkService_is_dead_link_presult__isset {
  _CheckDeadlinkService_is_dead_link_presult__isset() : success(false) {}
  bool success;
} _CheckDeadlinkService_is_dead_link_presult__isset;

class CheckDeadlinkService_is_dead_link_presult {
 public:


  virtual ~CheckDeadlinkService_is_dead_link_presult() throw() {}

  bool* success;

  _CheckDeadlinkService_is_dead_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CheckDeadlinkServiceClient : virtual public CheckDeadlinkServiceIf {
 public:
  CheckDeadlinkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CheckDeadlinkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool is_dead_link(const std::string& url, const std::string& body);
  void send_is_dead_link(const std::string& url, const std::string& body);
  bool recv_is_dead_link();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CheckDeadlinkServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CheckDeadlinkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CheckDeadlinkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_is_dead_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CheckDeadlinkServiceProcessor(boost::shared_ptr<CheckDeadlinkServiceIf> iface) :
    iface_(iface) {
    processMap_["is_dead_link"] = &CheckDeadlinkServiceProcessor::process_is_dead_link;
  }

  virtual ~CheckDeadlinkServiceProcessor() {}
};

class CheckDeadlinkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CheckDeadlinkServiceProcessorFactory(const ::boost::shared_ptr< CheckDeadlinkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CheckDeadlinkServiceIfFactory > handlerFactory_;
};

class CheckDeadlinkServiceMultiface : virtual public CheckDeadlinkServiceIf {
 public:
  CheckDeadlinkServiceMultiface(std::vector<boost::shared_ptr<CheckDeadlinkServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CheckDeadlinkServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CheckDeadlinkServiceIf> > ifaces_;
  CheckDeadlinkServiceMultiface() {}
  void add(boost::shared_ptr<CheckDeadlinkServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool is_dead_link(const std::string& url, const std::string& body) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_dead_link(url, body);
    }
    return ifaces_[i]->is_dead_link(url, body);
  }

};



#endif
