// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "StaticLinkBaseService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class StaticLinkBaseServiceHandler : virtual public StaticLinkBaseServiceIf {
 public:
  StaticLinkBaseServiceHandler() {
    // Your initialization goes here
  }

  void load_db_task(const int32_t task_id, const bool is_add_task) {
    // Your implementation goes here
    printf("load_db_task\n");
  }

  void load_mongodb_task(const int32_t task_id, const bool is_add_task) {
    // Your implementation goes here
    printf("load_mongodb_task\n");
  }

  void get_download_task(std::vector<DownloadTask> & _return) {
    // Your implementation goes here
    printf("get_download_task\n");
  }

  void get_extract_task(std::vector<ExtractItem> & _return) {
    // Your implementation goes here
    printf("get_extract_task\n");
  }

  void get_one_extract_task(ExtractItem& _return) {
    // Your implementation goes here
    printf("get_one_extract_task\n");
  }

  void upload_download_task(const DownloadedBodyItem& downloaded_body_item) {
    // Your implementation goes here
    printf("upload_download_task\n");
  }

  void upload_extract_task(const ExtractItem& extract_item, const MatchedResultItem& matched_result_item) {
    // Your implementation goes here
    printf("upload_extract_task\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<StaticLinkBaseServiceHandler> handler(new StaticLinkBaseServiceHandler());
  shared_ptr<TProcessor> processor(new StaticLinkBaseServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

