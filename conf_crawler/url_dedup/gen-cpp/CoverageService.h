/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CoverageService_H
#define CoverageService_H

#include <thrift/TDispatchProcessor.h>
#include "conf_crawler_types.h"



class CoverageServiceIf {
 public:
  virtual ~CoverageServiceIf() {}
  virtual void get_download_task(std::vector<DownloadTask> & _return) = 0;
  virtual void upload_download_task(const DownloadedBodyItem& downloaded_body_item) = 0;
};

class CoverageServiceIfFactory {
 public:
  typedef CoverageServiceIf Handler;

  virtual ~CoverageServiceIfFactory() {}

  virtual CoverageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CoverageServiceIf* /* handler */) = 0;
};

class CoverageServiceIfSingletonFactory : virtual public CoverageServiceIfFactory {
 public:
  CoverageServiceIfSingletonFactory(const boost::shared_ptr<CoverageServiceIf>& iface) : iface_(iface) {}
  virtual ~CoverageServiceIfSingletonFactory() {}

  virtual CoverageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CoverageServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CoverageServiceIf> iface_;
};

class CoverageServiceNull : virtual public CoverageServiceIf {
 public:
  virtual ~CoverageServiceNull() {}
  void get_download_task(std::vector<DownloadTask> & /* _return */) {
    return;
  }
  void upload_download_task(const DownloadedBodyItem& /* downloaded_body_item */) {
    return;
  }
};


class CoverageService_get_download_task_args {
 public:

  CoverageService_get_download_task_args() {
  }

  virtual ~CoverageService_get_download_task_args() throw() {}


  bool operator == (const CoverageService_get_download_task_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CoverageService_get_download_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoverageService_get_download_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CoverageService_get_download_task_pargs {
 public:


  virtual ~CoverageService_get_download_task_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CoverageService_get_download_task_result__isset {
  _CoverageService_get_download_task_result__isset() : success(false) {}
  bool success;
} _CoverageService_get_download_task_result__isset;

class CoverageService_get_download_task_result {
 public:

  CoverageService_get_download_task_result() {
  }

  virtual ~CoverageService_get_download_task_result() throw() {}

  std::vector<DownloadTask>  success;

  _CoverageService_get_download_task_result__isset __isset;

  void __set_success(const std::vector<DownloadTask> & val) {
    success = val;
  }

  bool operator == (const CoverageService_get_download_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CoverageService_get_download_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoverageService_get_download_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CoverageService_get_download_task_presult__isset {
  _CoverageService_get_download_task_presult__isset() : success(false) {}
  bool success;
} _CoverageService_get_download_task_presult__isset;

class CoverageService_get_download_task_presult {
 public:


  virtual ~CoverageService_get_download_task_presult() throw() {}

  std::vector<DownloadTask> * success;

  _CoverageService_get_download_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CoverageService_upload_download_task_args__isset {
  _CoverageService_upload_download_task_args__isset() : downloaded_body_item(false) {}
  bool downloaded_body_item;
} _CoverageService_upload_download_task_args__isset;

class CoverageService_upload_download_task_args {
 public:

  CoverageService_upload_download_task_args() {
  }

  virtual ~CoverageService_upload_download_task_args() throw() {}

  DownloadedBodyItem downloaded_body_item;

  _CoverageService_upload_download_task_args__isset __isset;

  void __set_downloaded_body_item(const DownloadedBodyItem& val) {
    downloaded_body_item = val;
  }

  bool operator == (const CoverageService_upload_download_task_args & rhs) const
  {
    if (!(downloaded_body_item == rhs.downloaded_body_item))
      return false;
    return true;
  }
  bool operator != (const CoverageService_upload_download_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoverageService_upload_download_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CoverageService_upload_download_task_pargs {
 public:


  virtual ~CoverageService_upload_download_task_pargs() throw() {}

  const DownloadedBodyItem* downloaded_body_item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CoverageService_upload_download_task_result {
 public:

  CoverageService_upload_download_task_result() {
  }

  virtual ~CoverageService_upload_download_task_result() throw() {}


  bool operator == (const CoverageService_upload_download_task_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CoverageService_upload_download_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoverageService_upload_download_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CoverageService_upload_download_task_presult {
 public:


  virtual ~CoverageService_upload_download_task_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CoverageServiceClient : virtual public CoverageServiceIf {
 public:
  CoverageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CoverageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_download_task(std::vector<DownloadTask> & _return);
  void send_get_download_task();
  void recv_get_download_task(std::vector<DownloadTask> & _return);
  void upload_download_task(const DownloadedBodyItem& downloaded_body_item);
  void send_upload_download_task(const DownloadedBodyItem& downloaded_body_item);
  void recv_upload_download_task();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CoverageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CoverageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CoverageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_download_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_download_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CoverageServiceProcessor(boost::shared_ptr<CoverageServiceIf> iface) :
    iface_(iface) {
    processMap_["get_download_task"] = &CoverageServiceProcessor::process_get_download_task;
    processMap_["upload_download_task"] = &CoverageServiceProcessor::process_upload_download_task;
  }

  virtual ~CoverageServiceProcessor() {}
};

class CoverageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CoverageServiceProcessorFactory(const ::boost::shared_ptr< CoverageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CoverageServiceIfFactory > handlerFactory_;
};

class CoverageServiceMultiface : virtual public CoverageServiceIf {
 public:
  CoverageServiceMultiface(std::vector<boost::shared_ptr<CoverageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CoverageServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CoverageServiceIf> > ifaces_;
  CoverageServiceMultiface() {}
  void add(boost::shared_ptr<CoverageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_download_task(std::vector<DownloadTask> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_download_task(_return);
    }
    ifaces_[i]->get_download_task(_return);
    return;
  }

  void upload_download_task(const DownloadedBodyItem& downloaded_body_item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_download_task(downloaded_body_item);
    }
    ifaces_[i]->upload_download_task(downloaded_body_item);
  }

};



#endif
