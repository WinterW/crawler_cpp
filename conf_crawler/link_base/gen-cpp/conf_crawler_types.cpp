/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "conf_crawler_types.h"

#include <algorithm>



int _kTemplateTypeValues[] = {
  TemplateType::CSS_SELECTOR_TYPE,
  TemplateType::PLAIN_HTML_TYPE,
  TemplateType::RELAY_TYPE,
  TemplateType::TEMPLATE_TYPE_MAX,
  TemplateType::NONE_TYPE
};
const char* _kTemplateTypeNames[] = {
  "CSS_SELECTOR_TYPE",
  "PLAIN_HTML_TYPE",
  "RELAY_TYPE",
  "TEMPLATE_TYPE_MAX",
  "NONE_TYPE"
};
const std::map<int, const char*> _TemplateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTemplateTypeValues, _kTemplateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kHeaderFieldsTypeValues[] = {
  HeaderFieldsType::DEFAULT_TYPE,
  HeaderFieldsType::UPDATE_PART_TYPE,
  HeaderFieldsType::UPDATE_ALL_TYPE,
  HeaderFieldsType::HEADER_FIELDS_TYPE_MAX,
  HeaderFieldsType::NONE_TYPE
};
const char* _kHeaderFieldsTypeNames[] = {
  "DEFAULT_TYPE",
  "UPDATE_PART_TYPE",
  "UPDATE_ALL_TYPE",
  "HEADER_FIELDS_TYPE_MAX",
  "NONE_TYPE"
};
const std::map<int, const char*> _HeaderFieldsType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kHeaderFieldsTypeValues, _kHeaderFieldsTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDownloaderTypeValues[] = {
  DownloaderType::NORMAL_TYPE,
  DownloaderType::WEBKIT_TYPE,
  DownloaderType::DOWNLOADER_TYPE_MAX,
  DownloaderType::NONE_TYPE
};
const char* _kDownloaderTypeNames[] = {
  "NORMAL_TYPE",
  "WEBKIT_TYPE",
  "DOWNLOADER_TYPE_MAX",
  "NONE_TYPE"
};
const std::map<int, const char*> _DownloaderType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDownloaderTypeValues, _kDownloaderTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* DownloadReqItem::ascii_fingerprint = "A05424282DCCCACB2DED38CF74AAFF0B";
const uint8_t DownloadReqItem::binary_fingerprint[16] = {0xA0,0x54,0x24,0x28,0x2D,0xCC,0xCA,0xCB,0x2D,0xED,0x38,0xCF,0x74,0xAA,0xFF,0x0B};

uint32_t DownloadReqItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->referer);
          this->__isset.referer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ua);
          this->__isset.ua = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->header_fields_type = (HeaderFieldsType::type)ecast0;
          this->__isset.header_fields_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->downloader_type = (DownloaderType::type)ecast1;
          this->__isset.downloader_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->post_fields);
          this->__isset.post_fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_out);
          this->__isset.time_out = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadReqItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownloadReqItem");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("referer", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->referer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ua", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ua);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("header_fields_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->header_fields_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downloader_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->downloader_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("post_fields", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->post_fields);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_out", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->time_out);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadReqItem &a, DownloadReqItem &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.ip, b.ip);
  swap(a.referer, b.referer);
  swap(a.ua, b.ua);
  swap(a.header_fields_type, b.header_fields_type);
  swap(a.downloader_type, b.downloader_type);
  swap(a.post_fields, b.post_fields);
  swap(a.time_out, b.time_out);
  swap(a.__isset, b.__isset);
}

const char* DownloadPropItem::ascii_fingerprint = "DA6BC29B6C0C31F6833671FA32698E6B";
const uint8_t DownloadPropItem::binary_fingerprint[16] = {0xDA,0x6B,0xC2,0x9B,0x6C,0x0C,0x31,0xF6,0x83,0x36,0x71,0xFA,0x32,0x69,0x8E,0x6B};

uint32_t DownloadPropItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_img);
          this->__isset.is_img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_friendly);
          this->__isset.is_friendly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retry_times);
          this->__isset.retry_times = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->seed_url);
          this->__isset.seed_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          this->__isset.depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadPropItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownloadPropItem");

  xfer += oprot->writeFieldBegin("is_img", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->is_img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_friendly", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->is_friendly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retry_times", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->retry_times);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seed_url", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->seed_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->depth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadPropItem &a, DownloadPropItem &b) {
  using ::std::swap;
  swap(a.is_img, b.is_img);
  swap(a.is_friendly, b.is_friendly);
  swap(a.interval, b.interval);
  swap(a.retry_times, b.retry_times);
  swap(a.seed_url, b.seed_url);
  swap(a.depth, b.depth);
  swap(a.__isset, b.__isset);
}

const char* DownloadTask::ascii_fingerprint = "C4556DAEF10E1FC938DF5C37EE9C91AA";
const uint8_t DownloadTask::binary_fingerprint[16] = {0xC4,0x55,0x6D,0xAE,0xF1,0x0E,0x1F,0xC9,0x38,0xDF,0x5C,0x37,0xEE,0x9C,0x91,0xAA};

uint32_t DownloadTask::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->req_item.read(iprot);
          this->__isset.req_item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prop_item.read(iprot);
          this->__isset.prop_item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadTask::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownloadTask");

  xfer += oprot->writeFieldBegin("req_item", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->req_item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prop_item", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->prop_item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadTask &a, DownloadTask &b) {
  using ::std::swap;
  swap(a.req_item, b.req_item);
  swap(a.prop_item, b.prop_item);
  swap(a.__isset, b.__isset);
}

const char* DownloadedBodyItem::ascii_fingerprint = "35ACADBED69F1B9DCBDF206A2E9EA0E5";
const uint8_t DownloadedBodyItem::binary_fingerprint[16] = {0x35,0xAC,0xAD,0xBE,0xD6,0x9F,0x1B,0x9D,0xCB,0xDF,0x20,0x6A,0x2E,0x9E,0xA0,0xE5};

uint32_t DownloadedBodyItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->req_item.read(iprot);
          this->__isset.req_item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prop_item.read(iprot);
          this->__isset.prop_item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_ok);
          this->__isset.is_ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadedBodyItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownloadedBodyItem");

  xfer += oprot->writeFieldBegin("req_item", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->req_item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prop_item", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->prop_item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_ok", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->is_ok);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->body);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadedBodyItem &a, DownloadedBodyItem &b) {
  using ::std::swap;
  swap(a.req_item, b.req_item);
  swap(a.prop_item, b.prop_item);
  swap(a.is_ok, b.is_ok);
  swap(a.body, b.body);
  swap(a.__isset, b.__isset);
}

const char* ExtractItem::ascii_fingerprint = "ED43D7CB2156C5A4FCE057ECAAE23949";
const uint8_t ExtractItem::binary_fingerprint[16] = {0xED,0x43,0xD7,0xCB,0x21,0x56,0xC5,0xA4,0xFC,0xE0,0x57,0xEC,0xAA,0xE2,0x39,0x49};

uint32_t ExtractItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url_template);
          this->__isset.url_template = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth);
          this->__isset.depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->seed_url);
          this->__isset.seed_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->referer);
          this->__isset.referer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->template_type = (TemplateType::type)ecast2;
          this->__isset.template_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtractItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExtractItem");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url_template", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->url_template);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->depth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->body);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seed_url", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->seed_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("referer", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->referer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("template_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->template_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtractItem &a, ExtractItem &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.url_template, b.url_template);
  swap(a.depth, b.depth);
  swap(a.body, b.body);
  swap(a.seed_url, b.seed_url);
  swap(a.referer, b.referer);
  swap(a.template_type, b.template_type);
  swap(a.__isset, b.__isset);
}

const char* MatchedResultItem::ascii_fingerprint = "7609B1D31BB860963FAAAD9401CD61DA";
const uint8_t MatchedResultItem::binary_fingerprint[16] = {0x76,0x09,0xB1,0xD3,0x1B,0xB8,0x60,0x96,0x3F,0xAA,0xAD,0x94,0x01,0xCD,0x61,0xDA};

uint32_t MatchedResultItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->self_result.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _ktype4;
            ::apache::thrift::protocol::TType _vtype5;
            xfer += iprot->readMapBegin(_ktype4, _vtype5, _size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              std::string _key8;
              xfer += iprot->readString(_key8);
              std::vector<std::string> & _val9 = this->self_result[_key8];
              {
                _val9.clear();
                uint32_t _size10;
                ::apache::thrift::protocol::TType _etype13;
                xfer += iprot->readListBegin(_etype13, _size10);
                _val9.resize(_size10);
                uint32_t _i14;
                for (_i14 = 0; _i14 < _size10; ++_i14)
                {
                  xfer += iprot->readString(_val9[_i14]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.self_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sub_result_list.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->sub_result_list.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              {
                this->sub_result_list[_i19].clear();
                uint32_t _size20;
                ::apache::thrift::protocol::TType _ktype21;
                ::apache::thrift::protocol::TType _vtype22;
                xfer += iprot->readMapBegin(_ktype21, _vtype22, _size20);
                uint32_t _i24;
                for (_i24 = 0; _i24 < _size20; ++_i24)
                {
                  std::string _key25;
                  xfer += iprot->readString(_key25);
                  std::vector<std::string> & _val26 = this->sub_result_list[_i19][_key25];
                  {
                    _val26.clear();
                    uint32_t _size27;
                    ::apache::thrift::protocol::TType _etype30;
                    xfer += iprot->readListBegin(_etype30, _size27);
                    _val26.resize(_size27);
                    uint32_t _i31;
                    for (_i31 = 0; _i31 < _size27; ++_i31)
                    {
                      xfer += iprot->readString(_val26[_i31]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sub_result_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_ok);
          this->__isset.is_ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->err_info);
          this->__isset.err_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchedResultItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MatchedResultItem");

  xfer += oprot->writeFieldBegin("self_result", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->self_result.size()));
    std::map<std::string, std::vector<std::string> > ::const_iterator _iter32;
    for (_iter32 = this->self_result.begin(); _iter32 != this->self_result.end(); ++_iter32)
    {
      xfer += oprot->writeString(_iter32->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter32->second.size()));
        std::vector<std::string> ::const_iterator _iter33;
        for (_iter33 = _iter32->second.begin(); _iter33 != _iter32->second.end(); ++_iter33)
        {
          xfer += oprot->writeString((*_iter33));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_result_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->sub_result_list.size()));
    std::vector<std::map<std::string, std::vector<std::string> > > ::const_iterator _iter34;
    for (_iter34 = this->sub_result_list.begin(); _iter34 != this->sub_result_list.end(); ++_iter34)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter34).size()));
        std::map<std::string, std::vector<std::string> > ::const_iterator _iter35;
        for (_iter35 = (*_iter34).begin(); _iter35 != (*_iter34).end(); ++_iter35)
        {
          xfer += oprot->writeString(_iter35->first);
          {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter35->second.size()));
            std::vector<std::string> ::const_iterator _iter36;
            for (_iter36 = _iter35->second.begin(); _iter36 != _iter35->second.end(); ++_iter36)
            {
              xfer += oprot->writeString((*_iter36));
            }
            xfer += oprot->writeListEnd();
          }
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_ok", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->is_ok);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("err_info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->err_info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchedResultItem &a, MatchedResultItem &b) {
  using ::std::swap;
  swap(a.self_result, b.self_result);
  swap(a.sub_result_list, b.sub_result_list);
  swap(a.is_ok, b.is_ok);
  swap(a.err_info, b.err_info);
  swap(a.__isset, b.__isset);
}

const char* DedupExistItem::ascii_fingerprint = "1767FFB0CB3D9275BC64B198AB3B8A8B";
const uint8_t DedupExistItem::binary_fingerprint[16] = {0x17,0x67,0xFF,0xB0,0xCB,0x3D,0x92,0x75,0xBC,0x64,0xB1,0x98,0xAB,0x3B,0x8A,0x8B};

uint32_t DedupExistItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_exists);
          this->__isset.is_exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->item_info);
          this->__isset.item_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DedupExistItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DedupExistItem");

  xfer += oprot->writeFieldBegin("is_exists", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->is_exists);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item_info", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->item_info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DedupExistItem &a, DedupExistItem &b) {
  using ::std::swap;
  swap(a.is_exists, b.is_exists);
  swap(a.item_info, b.item_info);
  swap(a.__isset, b.__isset);
}


