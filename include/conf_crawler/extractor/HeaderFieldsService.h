/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HeaderFieldsService_H
#define HeaderFieldsService_H

#include <thrift/TDispatchProcessor.h>
#include "conf_crawler_types.h"



class HeaderFieldsServiceIf {
 public:
  virtual ~HeaderFieldsServiceIf() {}
  virtual void get_header_fields(std::vector<std::string> & _return, const std::string& url, const int32_t depth) = 0;
};

class HeaderFieldsServiceIfFactory {
 public:
  typedef HeaderFieldsServiceIf Handler;

  virtual ~HeaderFieldsServiceIfFactory() {}

  virtual HeaderFieldsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HeaderFieldsServiceIf* /* handler */) = 0;
};

class HeaderFieldsServiceIfSingletonFactory : virtual public HeaderFieldsServiceIfFactory {
 public:
  HeaderFieldsServiceIfSingletonFactory(const boost::shared_ptr<HeaderFieldsServiceIf>& iface) : iface_(iface) {}
  virtual ~HeaderFieldsServiceIfSingletonFactory() {}

  virtual HeaderFieldsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HeaderFieldsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HeaderFieldsServiceIf> iface_;
};

class HeaderFieldsServiceNull : virtual public HeaderFieldsServiceIf {
 public:
  virtual ~HeaderFieldsServiceNull() {}
  void get_header_fields(std::vector<std::string> & /* _return */, const std::string& /* url */, const int32_t /* depth */) {
    return;
  }
};

typedef struct _HeaderFieldsService_get_header_fields_args__isset {
  _HeaderFieldsService_get_header_fields_args__isset() : url(false), depth(false) {}
  bool url;
  bool depth;
} _HeaderFieldsService_get_header_fields_args__isset;

class HeaderFieldsService_get_header_fields_args {
 public:

  HeaderFieldsService_get_header_fields_args() : url(), depth(0) {
  }

  virtual ~HeaderFieldsService_get_header_fields_args() throw() {}

  std::string url;
  int32_t depth;

  _HeaderFieldsService_get_header_fields_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_depth(const int32_t val) {
    depth = val;
  }

  bool operator == (const HeaderFieldsService_get_header_fields_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(depth == rhs.depth))
      return false;
    return true;
  }
  bool operator != (const HeaderFieldsService_get_header_fields_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeaderFieldsService_get_header_fields_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HeaderFieldsService_get_header_fields_pargs {
 public:


  virtual ~HeaderFieldsService_get_header_fields_pargs() throw() {}

  const std::string* url;
  const int32_t* depth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeaderFieldsService_get_header_fields_result__isset {
  _HeaderFieldsService_get_header_fields_result__isset() : success(false) {}
  bool success;
} _HeaderFieldsService_get_header_fields_result__isset;

class HeaderFieldsService_get_header_fields_result {
 public:

  HeaderFieldsService_get_header_fields_result() {
  }

  virtual ~HeaderFieldsService_get_header_fields_result() throw() {}

  std::vector<std::string>  success;

  _HeaderFieldsService_get_header_fields_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const HeaderFieldsService_get_header_fields_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HeaderFieldsService_get_header_fields_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeaderFieldsService_get_header_fields_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HeaderFieldsService_get_header_fields_presult__isset {
  _HeaderFieldsService_get_header_fields_presult__isset() : success(false) {}
  bool success;
} _HeaderFieldsService_get_header_fields_presult__isset;

class HeaderFieldsService_get_header_fields_presult {
 public:


  virtual ~HeaderFieldsService_get_header_fields_presult() throw() {}

  std::vector<std::string> * success;

  _HeaderFieldsService_get_header_fields_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HeaderFieldsServiceClient : virtual public HeaderFieldsServiceIf {
 public:
  HeaderFieldsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HeaderFieldsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_header_fields(std::vector<std::string> & _return, const std::string& url, const int32_t depth);
  void send_get_header_fields(const std::string& url, const int32_t depth);
  void recv_get_header_fields(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HeaderFieldsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HeaderFieldsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HeaderFieldsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_header_fields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HeaderFieldsServiceProcessor(boost::shared_ptr<HeaderFieldsServiceIf> iface) :
    iface_(iface) {
    processMap_["get_header_fields"] = &HeaderFieldsServiceProcessor::process_get_header_fields;
  }

  virtual ~HeaderFieldsServiceProcessor() {}
};

class HeaderFieldsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HeaderFieldsServiceProcessorFactory(const ::boost::shared_ptr< HeaderFieldsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HeaderFieldsServiceIfFactory > handlerFactory_;
};

class HeaderFieldsServiceMultiface : virtual public HeaderFieldsServiceIf {
 public:
  HeaderFieldsServiceMultiface(std::vector<boost::shared_ptr<HeaderFieldsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HeaderFieldsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HeaderFieldsServiceIf> > ifaces_;
  HeaderFieldsServiceMultiface() {}
  void add(boost::shared_ptr<HeaderFieldsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_header_fields(std::vector<std::string> & _return, const std::string& url, const int32_t depth) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_header_fields(_return, url, depth);
    }
    ifaces_[i]->get_header_fields(_return, url, depth);
    return;
  }

};



#endif
